#!/bin/bash
# A script for packing a molecule one by one, use to generate cylindrical system.
# some function refer to the following websit:
# https://jerkwin.github.io/2016/02/21/%E6%9E%84%E5%BB%BA%E8%A1%A8%E9%9D%A2%E4%BF%AE%E9%A5%B0%E9%95%BF%E9%93%BE%E5%88%86%E5%AD%90%E7%9A%84%E7%BA%B3%E7%B1%B3%E9%A2%97%E7%B2%92%E6%A8%A1%E5%9E%8B/

############################################################################
#                     Author : Written by Yujie Liu                        #
#                        Email : 1051690424@qq.com                         #
#                             Version : 1.2                                #
#                           Date : 2020.03.24                              #
############################################################################

#=========================HELP INFORMATION==============================#
Description() {
    echo -e "
>>DESCRIPTION: 
    $0 can pack a molecule one by one, use to generate cylindrical system.
    You must indicate the [head/tail] atom index(in gro file)
    "
}

Usage() {
    echo "
    Usage $0 Options:
        -h      Show help information
        -i      Input, Single Molecule gro file (default: mol.gro)
        -head   Value [int], head atom index (from 1 start)
        -tail   Value [int], tail atom index (from 1 start)
        -x0     Value [nm], the inner diameter of cylinder (default: 0.8 nm)
        -da     Value [degree], rotation angle in each layer (default: 15°)
        -H      Value [nm], the height of cylinder (default: 5 nm)
        -dh     Value [nm], the height of each layer (default: 0.5 nm)
        -type   Value [int], '1' is normal, '2' represents rotate each layer as da/2 (default: 1)
    "
}

inputfile="mol.gro"
head=
tail=
x0=0.8
da=15
H=5.0
dh=0.5
type=1

[[ $# -lt 1 ]] && { Description; Usage; exit 1; }
options=($@); N=${#options[@]}
for((i = 0; i < N; i++));do
    arg=${options[$i]}; j=$((i+1))
    [[ $arg =~ -h$ ]] && { Description; Usage; exit 2; }
    [[ $arg =~ -i ]]  && { inputfile=${options[$j]}; }
    [[ $arg =~ -head ]]  && { head=${options[$j]}; }
    [[ $arg =~ -tail ]]  && { tail=${options[$j]}; }
    [[ $arg =~ -x0 ]]  && { x0=${options[$j]}; }
    [[ $arg =~ -da ]]  && { da=${options[$j]}; }
    [[ $arg =~ -H ]]   && { H=${options[$j]}; }
    [[ $arg =~ -dh ]]  && { dh=${options[$j]}; }
    [[ $arg =~ -type ]]  && { type=${options[$j]}; }
done

outputfile="new_${inputfile//.gro}.gro"
if [[ ! -e ${inputfile} ]];then
    echo -e "\nInput File (${inputfile}) not found! Please check."
    exit
fi

if [[ -z $head ]] || [[ -z $tail ]]; then
    echo "Need enough parameters <-head and -tail>"
    Usage
    exit
fi

awk '
    BEGIN {
        #=====================INITIAL VALUE=============================#
        inputfile = "'$inputfile'"; outputfile = "'$outputfile'"
        head = "'$head'"+0; tail = "'$tail'"+0; da = "'$da'"+0
        H = "'$H'"+0; dh = "'$dh'"+0; x0 = "'$x0'"+0; y0 = z0 = 0
        PI = 4*atan2(1, 1); type = "'$type'"+0
        
        #++++++++++++++++++++PRINT INITIAL PARAMETERS+++++++++++++++++++#
        Print_parameters()
        
        #+++++++++++++++++++++READ GRO FILE+++++++++++++++++++++++++++++#
        ReadGro(inputfile, X, Y, Z)
        
        #put head atom into (0, 0, 0) position
        x  = X[head]; y = Y[head]; z = Z[head]
        for(i = 1; i <= Natom; i++) {
            X[i] -= x; Y[i] -= y; Z[i] -= z
            #print Aname[i],  X[i]*10, Y[i]*10, Z[i]*10
        }
        #obtain the molecule principal axis and normalize it
        Vij[1] = X[tail]
        Vij[2] = Y[tail]
        Vij[3] = Z[tail]
        UnitVec(Vij)
        
        #x axis
        VX[1] = 1; VX[2] = 0; VX[3] = 0
        #angle = Angle(Vij, VX)
        #print angle*180/PI
        
        #rotate 180 degrees around the center line between molecule axis and X-axis vector
        x = (Vij[1]+VX[1])/2
        y = (Vij[2]+VX[2])/2
        z = (Vij[3]+VX[3])/2
        AxiRotMat(PI, x, y, z)
        
        #put the molecule principal axis into X-axis
        for(k = 1; k <= Natom; k++) {
            V[1] = X[k]
            V[2] = Y[k]
            V[3] = Z[k]
            RotVec(RotMat, V)
            X[k] = V[1]
            Y[k] = V[2]
            Z[k] = V[3]
        }
        
        #put head atom into (x0, y0, z0) position, inner diameter
        x  = -x0; y = -y0; z = -z0
        for(i = 1; i <= Natom; i++) {
            X[i] -= x; Y[i] -= y; Z[i] -= z
        }
        #print X[head], Y[head], Z[head]
        
        #Rotate the molecules on xy plane, generate molecular layers
        rotation = int(360/da)
        plies = int(H/dh)
        print "Mol", x0, da, H, dh > outputfile
        print Natom*(plies+1)*rotation >> outputfile
        nmol = 1; total = 1
        for(h = 0; h <= plies; h++) {
            for(a = 0; a < rotation; a++) {
                for(j = 1; j <= Natom; j++) {
                    if(type==2 && h%2!=0) {
                        x = X[j]*cos((a+0.5)*da*PI/180) - Y[j]*sin((a+0.5)*da*PI/180)
                        y = Y[j]*cos((a+0.5)*da*PI/180) + X[j]*sin((a+0.5)*da*PI/180)
                        z = Z[j] + h*dh
                    }
                    else {
                        x = X[j]*cos(a*da*PI/180) - Y[j]*sin(a*da*PI/180)
                        y = Y[j]*cos(a*da*PI/180) + X[j]*sin(a*da*PI/180)
                        z = Z[j] + h*dh
                    }
                    printf("%5d%-5s%5s%5d%8.3f%8.3f%8.3f\n", 
                           nmol%100000, "MOL", Aname[j], total%100000, x, y, z) >> outputfile
                    total++
                }
                nmol++
            }
        }
        #the box is none, need set by yourself by using gmx editconf
        printf("%12.4f %12.4f %12.4f\n", 0, 0, 0) >> outputfile

    } 
    
    #=====================ReadGro FUNCTION==============================#
    function Print_parameters() {
        print "You are Using the following parameters:"
        print "\thead atom index: " head
        print "\ttail atom index: " tail
        print "\tthe inner diameter of cylinder: " x0 " nm"
        print "\trotation angle in each layer: " da " °"
        print "\tthe height of cylinder: " H " nm"
        print "\tthe height of each layer: " dh " nm"
    }
    
    function ReadGro(grofile, x, y, z, _ARGVEND_, i) {
        getline < grofile; Tips  = $0
        getline < grofile; Natom = $1
        for(i = 1; i <= Natom; i++) {
            getline < grofile
            Res[i]   = substr($0, 6, 5); gsub(" ", "", Res[i])
            Aname[i] = substr($0, 11, 5); gsub(" ", "", Aname[i])
            x[i]=substr($0, 21, 8)+ 0; y[i]=substr($0, 29, 8)+ 0;
            z[i]=substr($0, 37, 8)+ 0
        }
        close(grofile)
    }
    
    function DotProduct(A, B) {
        return A[1]*B[1] + A[2]*B[2] + A[3]*B[3]
    }
    
    function UnitVec(V, _ARGVEND_, Rtmp) {
        Rtmp = DotProduct(V, V)
        if(Rtmp != 0) {
            Rtmp = 1.0/sqrt(Rtmp)
            V[1] *= Rtmp; V[2] *= Rtmp; V[3] *= Rtmp
        }
    }
    
    function acos(x) {
        return atan2(sqrt(1-x*x), x)
    }
    
    function Angle(n1, n2) {
        return acos(DotProduct(n1, n2)/sqrt(DotProduct(n1, n1)*DotProduct(n2, n2)))
    }
    
    function AxiRotMat(tht, x, y, z, _ARGVEND_, Rtmp, w) { # rotate tht Rad around (x,y,z) //copy
        Rtmp=x*x+y*y+z*z
        if(Rtmp>1E-6) { Rtmp=1/sqrt(Rtmp); x *= Rtmp; y *= Rtmp; z *= Rtmp }
        Rtmp=sin(tht/2); w=cos(tht/2);  x *= Rtmp; y *= Rtmp; z *= Rtmp
        RotMat[1,1]=1-2*(y*y+z*z); RotMat[1,2]=  2*(x*y-w*z); RotMat[1,3]=  2*(x*z+w*y)
        RotMat[2,1]=  2*(x*y+w*z); RotMat[2,2]=1-2*(x*x+z*z); RotMat[2,3]=  2*(y*z-w*x)
        RotMat[3,1]=  2*(x*z-w*y); RotMat[3,2]=  2*(y*z+w*x); RotMat[3,3]=1-2*(x*x+y*y)
    }
    
    function RotVec(RotMat, V, _ARGVEND_, Vx, Vy, Vz) { # rotate V according to matrix RotMat //copy
        Vx = V[1]; Vy = V[2]; Vz = V[3]
        V[1]= RotMat[1,1]*Vx + RotMat[1,2]*Vy + RotMat[1,3]*Vz
        V[2]= RotMat[2,1]*Vx + RotMat[2,2]*Vy + RotMat[2,3]*Vz
        V[3]= RotMat[3,1]*Vx + RotMat[3,2]*Vy + RotMat[3,3]*Vz
}
'
