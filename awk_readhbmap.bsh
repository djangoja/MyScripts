#!/bin/bash
# A bash script for extracting the hydrogen bond existences from
# HB Map file (.xpm) generated by "gmx hbond -hbm" from GROMACS.
# It outputs a list with donor-acceptor pairs with occupancy above the user-input threshold.
# The script also outputs a file which describes the occupancy over time, and although
# it is by default formatted to be read by Grace (xmgrace), it can be plotted with
# other spreadsheet softwares.

##############################################################################
# Original source was derived from Ricardo O. S. Soares, called readHBmap.py #
#                     Author : Rewritten by Yujie Liu                        #
#                        Email : 1051690424@qq.com                           #
#                             Version : 1.0                                  #
#                           Date : 2020.02.10                                #
##############################################################################

#=========================HELP INFORMATION==============================#
Usage() {
    echo "
    Usage: $0 Options
        -h    Show help information
        -f    Input, .gro file(default: md.gro)
        -m    Input, hydrogen bond map matrix file(default: hbmap.xpm)
        -n    Input, hydrogen bond index file(default: hbond.ndx)
        -o    Output, occupancy of each pair over time (default: occupancy.xvg)
        -p    Output, list of HB residue pairs and its occupancies (default: pairs.dat)
        -t    Option, Process and output only interacting pairs that have occupancy equal or larger than this value, must be between 0 and 0.99 (default: 0.1)
        -d    Option, partial occupancies at each defined timestep (frames) along the trajectory (default: 100 frames)
    "
}
#+++++++++++++++++++++++++++DEFAULT PARAMETERS+++++++++++++++++++++++++#
INPUT_GRO=md.gro
INPUT_HBMAP=hbmap.xpm
INPUT_HBOND=hbond.ndx
OUTPUT_PLOT=occupancy.xvg
OUTPUT_PAIRS=pairs.dat
THRESHOLD=0.1
dt=100
while getopts :hf:m:n:o:p:t:d: OPTION
do
    case $OPTION in
        h)
            Usage
            exit 1
            ;;
        f)
            INPUT_GRO=$OPTARG
            
            ;;
        m)
            INPUT_HBMAP=$OPTARG
            ;;
        n)
            INPUT_HBOND=$OPTARG
            ;;
        o)
            OUTPUT_PLOT=$OPTARG
            ;;
        p)
            OUTPUT_PAIRS=$OPTARG
            ;;
        t)
            THRESHOLD=$OPTARG
            ;;
        d)
            dt=$OPTARG
            ;;
        ?)
            echo "Input option is wrong!"
            Usage
            exit 2
            ;;
    esac
done
if [[ ! -e $INPUT_GRO ]] || [[ ! -e $INPUT_HBMAP ]] || [[ ! -e $INPUT_HBOND ]]; then
    echo "No Input files!"
    Usage
    exit 3
fi

#=======================================================================#
awk -v INPUT_HBMAP=$INPUT_HBMAP -v INPUT_HBOND=$INPUT_HBOND -v  THRESHOLD=$THRESHOLD \
    -v INPUT_GRO=$INPUT_GRO -v OUTPUT_PLOT=$OUTPUT_PLOT -v OUTPUT_PAIRS=$OUTPUT_PAIRS \
    -v dt=$dt '
    BEGIN {
        #=======================READ XPM FILE===========================#
        n1 = 0; n = 0;
        while(getline < INPUT_HBMAP > 0) {
            n++
            if($0~/char/) {
                getline < INPUT_HBMAP
                n++
                gsub("\"", "")
                numberFrames = $1
                numberHbonds = $2
            }
            if($0~/y-axis/)  {
                while(getline < INPUT_HBMAP > 0) {
                    if($0~/y-axis/) {
                        n++
                    }
                    else {
                        break
                    }
                }
                startingLine = n + 1
                for(i = startingLine; i < startingLine + numberHbonds; i ++) {
                    gsub("\"", "")
                    counter[n1] = split($0, A, "o") - 1
                    #print counter[n1]
                    n1++
                    getline < INPUT_HBMAP
                }
                
            }
        }
        #print startingLine, numberFrames, numberHbonds
        close(INPUT_HBMAP)
        
        #===================READ NDX FILE===============================#
        while(getline < INPUT_HBOND > 0) {
            if($0~/hbonds/) {
                for(i = numberHbonds - 1; i >= 0; i-- ) {
                    getline < INPUT_HBOND
                    pairs[i, 0] = $1
                    pairs[i, 1] = $2
                    pairs[i, 2] = $3
                    #print pairs[i, 0]
                }
            }
        }
        close(INPUT_HBOND)
        
        #======================READ GRO FILE============================#
        WriteHeader01(numberHbonds, THRESHOLD, INPUT_HBMAP, numberFrames, OUTPUT_PAIRS)
        Gro(pairs, INPUT_GRO, numberHbonds, numberFrames, counter, \
                occupancies, donorResNumber, donorResName, hydrogenNumber, \
                donorGroupName, acceptorResNumber, acceptorResName, \
                acceptorGroupNumber, acceptorGroupName)
        Writedata(numberHbonds, occupancies, THRESHOLD, donorResNumber, \
                  donorResName, hydrogenNumber, donorGroupName, acceptorResNumber, \
                  acceptorResName, acceptorGroupNumber, acceptorGroupName, \
                  OUTPUT_PAIRS, pairNames, occupanciesThreshold)
        
        #=========================WRITE DATA============================#
        remainder = CountInterval(numberFrames, dt, occupanciesThreshold, startingLine, INPUT_HBMAP, \
                    counterInterval, counterRemainder)
        if(length(occupanciesThreshold) > 0) {
            if(dt <= numberFrames) {
                WriteHeader02(occupanciesThreshold, pairNames, THRESHOLD, OUTPUT_PLOT)
                WriteXvg(occupanciesThreshold, counterInterval, counterRemainder, \
                         remainder, dt, OUTPUT_PLOT)
            }
            else {
                WriteWarning(OUTPUT_PLOT, dt, numberFrames, INPUT_HBMAP)
                dtWarning(dt, numberFrames)
            }
        }
        else
            noPairs(THRESHOLD)
        
    }
    
    #========================FUNCTION DEFINITION========================#
    #++++++++++++++++++++++++WARNING FUNCTION+++++++++++++++++++++++++++#
    function noPairs(threshold) {
        printf("No hydrogen bonds found above the threshold of %f\n", threshold)
    }
    
    function dtWarning(dt, numberFrames) {
        printf("Warning: the chosen timestep(%d) is larger than the total number of frames(%d)," \
               "the xvg output will be empty!\n",
               dt, numberFrames)
    }
    
    function WriteWarning(fileOccupancyTime, dt, numberFrames, inputHbmap) {
        printf("No output to write, chosen timestep %1.2f should be positive " \
               "and smaller than the total number of frames from %s, i.e. 0 < dt <= %d ", \
                dt, inputHbmap, numberFrames) > fileOccupancyTime
    }
    
    #++++++++++++++++++++++++READ FILE FUNCTION+++++++++++++++++++++++++#
    function Linedata(inputgro, lines) {
        n2 = 1
        while(getline < inputgro > 0) {
            if(n2 == lines) {
                cache = $0
            }
            n2++
        }
        close(inputgro)
        return cache
    }
    
    function Gro(pairs0, inputGro, numberHbonds, numberFrames, counter, \
                occupancies, donorResNumber, donorResName, hydrogenNumber, \
                donorGroupName, acceptorResNumber, acceptorResName, \
                acceptorGroupNumber, acceptorGroupName) {
        j = 0
        for(i = 0; i < numberHbonds; i++) {
            lineDonorGroupNumber = pairs0[i, 0] + 2
            lineHydrogenNumber = pairs0[i, 1] + 2
            lineAcceptorGroupNumber = pairs0[i, 2] + 2
            line_donor = Linedata(inputGro, lineHydrogenNumber)
            line_acceptor = Linedata(inputGro, lineAcceptorGroupNumber)
            donorResNumber[j]        =  substr(line_donor, 1, 5)+0
            donorResName[j]          =  substr(line_donor, 6, 5)
            donorGroupName[j]        =  substr(line_donor, 11, 5)
            hydrogenNumber[j]        =  substr(line_donor, 16, 5)+0
            acceptorResNumber[j]     =  substr(line_acceptor, 1, 5)+0
            acceptorResName[j]       =  substr(line_acceptor, 6, 5)
            acceptorGroupName[j]     =  substr(line_acceptor, 11, 5)
            acceptorGroupNumber[j]   =  substr(line_acceptor, 16, 5)+0
            occupancies[j] = counter[i]/numberFrames*100
            j++
        }
    }
    
    function CountInterval(numberFrames, dt, occupanciesThreshold1, startingLine, inputHbmap, \
                           counterInterval, counterRemainder) {
        init = 0; mm = 0
        remainder = numberFrames % dt
        numberFrames = numberFrames - remainder
        while(init < numberFrames) {
            for(i = 0; i < length(occupanciesThreshold1); i++) {
                j = startingLine + occupanciesThreshold1[i]
                cache = Linedata(inputHbmap, j)
                cache = substr(cache, init+1, dt)
                counterInterval[mm] = split(cache, A, "o") - 1
                mm++
            }
            init += dt
        }
        init -= dt
        if(remainder != 0) {
            for(i = 0; i < length(occupanciesThreshold1); i++) {
                j = startingLine + occupanciesThreshold1[i]
                cache = Linedata(inputHbmap, j)
                cache = substr(cache, init+1, remainder)
                counterRemainder[i] = split(cache, A, "o") - 1
            }
        }
        return remainder
    }
    
    #++++++++++++++++++++WRITE FILE FUNCTION++++++++++++++++++++++++++++#
    function WriteHeader01(numberHbonds, threshold, inputHbmap, numberFrames, output_pairs) {
        printf("--->>> Results for readhbmap.bsh (Author: Yujie Liu)\n" \
               "--->>> Found %d valid hydrogen bond pairs with occupancy of more than %3.1f%\n" \
               "--->>> The hydrogen bond map (%s) has %d frames\n\n" \
               "  Pair ID  |          donor-acceptor       |  Atom Number |  Occupancy (%) | Pair ID\n\n",
               numberHbonds, threshold*100, inputHbmap, numberFrames) > output_pairs
    }
    
    function WriteHeader02(occupanciesThreshold2, pairNames2, threshold, \
                           fileOccupancyTime) {
        printf("@    title \"HB occupancy over time\" \n" \
               "@    subtitle \"Above the threshold of %4.2f %\" \n" \
               "@    xaxis  label \"Frame\" \n" \
               "@    yaxis  label \"Occupancy (%)\" \n" \
               "@TYPE xy \n" \
               "@page size 992, 612 \n" \
               "@ legend on \n" \
               "@ legend box on \n" \
               "@ legend loctype view \n" \
               "@ legend 1.25, 0.8 \n" \
               "@ legend length 2 \n",
                threshold * 100) > fileOccupancyTime
        for(i = 0; i < length(occupanciesThreshold2); i++) {
            printf("@ s%d legend \"%s\" \n",
                    i, pairNames2[i]) >> fileOccupancyTime
        }
        printf("\n") >> fileOccupancyTime
    }
    
    function Writedata(numberHbonds, occupancies, threshold, donorResNumber, \
                       donorResName, hydrogenNumber, donorGroupName, \
                       acceptorResNumber, acceptorResName, acceptorGroupNumber, \
                       acceptorGroupName, output_pairs, pairNames0, \
                       occupanciesThreshold0) {
        n = 0; j = 0
        for(i = 0; i < numberHbonds; i++) {
            if(occupancies[i] >= threshold * 100) {
                n++
                occupanciesThreshold0[j] = i
                gsub(" ", "", donorResName[i])
                gsub(" ", "", donorGroupName[i])
                gsub(" ", "", acceptorResName[i])
                gsub(" ", "", acceptorGroupName[i])
                pairNames0[j] = sprintf("%d%s-%d%s", donorResNumber[i], donorResName[i], \
                acceptorResNumber[i], acceptorResName[i])
                printf("%5d %10d%s(%-5s) - %5d%s(%-5s) %5d - %5d %10.1f %10d \n",
                       n,donorResNumber[i],donorResName[i],donorGroupName[i], \
                       acceptorResNumber[i],acceptorResName[i],acceptorGroupName[i],\
                       hydrogenNumber[i],acceptorGroupNumber[i],occupancies[i],n) \
                >> output_pairs
                j++
            }
        }
        print "Successfully wrote file ""\"", output_pairs,"\""
    }
    
    function WriteXvg(occupanciesThreshold3, counterInterval3, counterRemainder3, \
                      remainder, dt, fileOccupancyTime) {
        limit = int (length(counterInterval3)/length(occupanciesThreshold3))
        if(remainder != 0)
            limit ++
        m = length(occupanciesThreshold3)
        k = 0; r = 0; init = 0;
        for(i = 0; i < limit; i++) {
            printf("%5d ", init) >> fileOccupancyTime
            for(j = k; j < m; j++) {
                if(remainder != 0 && (m == length(counterInterval3) + length(occupanciesThreshold3))) {
                    output = counterRemainder3[r] / remainder * 100
                    printf(" %5.2f", output) >> fileOccupancyTime
                    r++
                }
                else {
                    output = counterInterval3[j] / dt * 100
                    printf(" %5.2f", output) >> fileOccupancyTime
                }
            }
            printf("\n") >> fileOccupancyTime
            k = m
            m = m + length(occupanciesThreshold3)
            init += dt
        }
        print "Successfully wrote file ""\"", fileOccupancyTime, "\"" 
    }
' 