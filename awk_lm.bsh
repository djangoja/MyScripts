#!/bin/bash
# A bash script for solve fitting parameters by Levenberg-Marquardt algorithm. 
# This code refer to https://blog.csdn.net/Huangyuliang1992/article/details/79033142
# Author: liuyujie

# This is an example to solve y = a*x^2 + b*x + c, there are three parameters.
# Usage: bash fit.bsh data.txt

data=$1
awk -v data=$data '
    BEGIN {
        FS = "[ ,\t]+"
        n = 0
        while(getline<data>0) {
            x[n] = $1; y[n] = $2
            n++
        }
        close(data)
        
        DERIV_STEP = 1e-6; MAX_ITER = 1000
        num_params = 3
        a = 0.8; b = 2.7; c = 1.2
        
        zeros(n, num_params, J)
        zeros(n, 1, fx) # fx = n x 1
        zeros(n, 1, fx_tmp)
        initparam(a, b, c, xk)
        lase_mse = 0
        step = 0
        u = 1; v = 2
        
        while(MAX_ITER) {
            mse = 0; mse_tmp = 0
            step++
            for(i = 0; i < n; i++) {
                fx[i, 0] = Func(x[i], xk) - y[i]
                mse += fx[i, 0]^2
                for(j = 0; j < num_params; j++) {
                    J[i, j] = Deriv(x[i], xk, num_params, j) # J = n x 3
                }
                #print i
            }
            mse /= n
            trans(J, n, num_params, Jt)
            matrixd(n, num_params, Jt, J, H1) # Jt = 3 x n
            matrixmult(u, matriXt, num_params)
            matrixadd(num_params, num_params, H, H1, matriXt) # H 3 x 3
            inv(H, num_params, invH)
            matrixp(-1, num_params, num_params, invH, _invH)
            matrixd1(num_params, num_params, n, _invH, Jt, H2) # H2 3 x n
            matrixd1(num_params, n, 1, H2, fx, dx) 
            matrixcopy(xk, xk_tmp, num_params, 1)
            matrixadd(num_params, 1, xk_tmp, xk_tmp, dx) # dx = 3 x 1
            
            for(j = 0; j < n; j++) {
                fx_tmp[j, 0] = Func(x[j], xk_tmp) - y[j]
                mse_tmp += fx_tmp[j, 0]^2
            }
            mse_tmp /= n
            
            matrixp(u, num_params, 1, dx, udx) # udx 3 x 1
            matrixd1(num_params, n, 1, Jt, fx, Jtfx) # Jtfx 3 x 1
            trans(dx, num_params, 1, dxt) # dxt 1 x 3
            matrixp(0.5, 1, num_params, dxt, pdx) # pdx = 0.5*dxt 
            matrixp(-1, num_params, 1, Jtfx, _Jtfx) # _Jtfx 3 x 1
            matrixadd(num_params, 1, udx_Jtfx, udx, _Jtfx)
            matrixd1(1, num_params, 1, pdx, udx_Jtfx, pdx_udx_Jtfx)
           
            qq = (mse - mse_tmp)/pdx_udx_Jtfx[0, 0]
            if(qq > 0) {
                s = 1.0/3.0
                v = 2
                mse = mse_tmp
                matrixcopy(xk_tmp, xk, num_params, 1)
                temp = 1 - (2*qq-1)^3
                if(s > temp) {
                    u = u * s
                }
                else {
                    u = u * temp
                }
            }
            else {
                u = u * v
                v = 2 * v
                matrixcopy(xk_tmp, xk, num_params, 1)
            }
            printf "step = %d, abs(mse-lase_mse) = %.8f\n", step, abs(mse-lase_mse)
            if(abs(mse-lase_mse)<DERIV_STEP)
                break
            lase_mse = mse
            MAX_ITER -= 1
        }
        printf "Parameters: a = %.3f, b = %.3f, c = %.3f\n", xk[0, 0], xk[1, 0], xk[2, 0]
    }
    
    function Func(input, params) {
        A = params[0, 0]
        B = params[1, 0]
        C = params[2, 0]
        return exp(A*input^2 + B*input + C)
    }
    
    function Deriv(input1, paramsm, num_params, n) {
        for(ii = 0; ii < num_params ; ii++) {
            params1[ii, 0] = paramsm[ii, 0]
            params2[ii, 0] = paramsm[ii, 0]
        }
        params1[n, 0] -= 1e-6
        params2[n, 0] += 1e-6
        p1 = Func(input1, params1)
        p2 = Func(input1, params2)
        d  = (p2-p1)*1.0/(2*1e-6)
        return d
    }
    
    function zeros(m, n, zeromat) {
        for(i = 0; i < m; i++) {
            for(j = 0; j < n; j++) {
                zeromat[i, j] = 0
            }
        }
    }

    function abs(kk) {
        return kk >= 0 ? kk : -kk
    }
    
    function matrixp(P, m, n, matrix1, matrix2) {
        for(i = 0; i < m; i++) {
            for(j = 0; j < n; j++) {
                matrix2[i, j] = P * matrix1[i, j] 
            }
        }
    }
    
    function matrixcopy(mam1, mam2, m, n) {
        for(i = 0; i < m; i++) {
            for(j = 0; j < n; j++) {
                mam2[i, j] = mam1[i, j]
            }
        }
    }
    
    function inv(aa, n, invm) {
        matrixmult(1, matrixE, n)
        for(k=0;k<n-1;k++) {  
            for(i=k+1;i<n;i++) {  
                m=aa[i,k]/aa[k,k];  
                for(j=0;j<n;j++) {  
                    aa[i,j]=aa[i,j]-m*aa[k,j];  
                    matrixE[i,j]=matrixE[i,j]-m*matrixE[k,j];  
                }  
            }  
        }
        for(k=n-1;k>0;k--) {  
            for(i=k-1;i>=0;i--) {  
                m=aa[i,k]/aa[k,k];  
                for(j=0;j<n;j++) {  
                    aa[i,j]=aa[i,j]-m*aa[k,j];  
                    matrixE[i,j]=matrixE[i,j]-m*matrixE[k,j];  
                }  
            }  
        }  
        for(i=0;i<n;i++) {  
            for(j=0;j<n;j++) {  
                invm[i,j]=matrixE[i,j]/aa[i,i];  
            }  
        } 
    }
    
    function matrixmult(X, matriX, num_params) {
        for(kj = 0; kj < num_params; kj++) {
            for(jk = 0; jk < num_params; jk++) {
                if(kj == jk) {
                    matriX[kj, jk] = 1
                }
                else {
                    matriX[kj, jk] = 0
                }
                matriX[kj, jk] = X*matriX[kj, jk]
            }
        }
    }
    
    function matrixadd(m, n, add, mat1, mat2) {
        for(k = 0; k < m; k++) {
            for(j = 0; j < n; j++) {
                add[k, j] = mat1[k, j] + mat2[k, j]
            }
        }
    }
    
    function matrixd(m, n, tr2, tr3, matrix) {
        for(k = 0; k < n; k++) {
            for(k1 = 0; k1 < n; k1++) {
                sum = 0
                for(k2 = 0; k2 < m; k2++) {
                    sum += tr2[k, k2]*tr3[k2, k1]
                }
                matrix[k, k1] = sum
            } 
        }
    }
    
    function matrixd1(m, n, q, tr2, tr3, matrixt) {
        for(k = 0; k < m; k++) {
            for(k1 = 0; k1 < q; k1++) {
                sum = 0
                for(k2 = 0; k2 < n; k2++) {
                    sum += tr2[k, k2]*tr3[k2, k1]
                }
                matrixt[k, k1] = sum
            } 
        }
    }
    
    function trans(tr, m, n, tr1) {
        for(k = 0; k < n; k++) {
            for(j = 0; j < m; j++) {
                tr1[k, j] = tr[j, k]
            }
        }
    }
    
    function initparam(a, b, c, xk1) {
        xk1[0, 0] = a
        xk1[1, 0] = b
        xk1[2, 0] = c
    }
'